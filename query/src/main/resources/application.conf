akka {
  loglevel = "INFO"
  actor {
    provider = cluster
    warn-about-java-serializer-usage = on
    serializers {
      institutionViewState = "hmda.query.serialization.InstitutionViewProtobufSerializer"
      filingViewState = "hmda.query.serialization.HmdaFilingViewProtobufSerializer"
    }
    serialization-bindings {
      "hmda.query.view.institutions.InstitutionView$InstitutionViewState" = institutionViewState
      "hmda.query.view.filing.HmdaFilingView$FilingViewState" = filingViewState
    }
  }

  remote {
    log-remote-lifecycle-events = error
    netty.tcp {
      hostname = ${clustering.ip}
      port = ${clustering.port}
    }
  }

  cluster {
    failure-detector.threshold = 12 //Increase value for AWS environments
    metrics.enabled = off

    retry-unsuccessful-join-after = 20s

    //DON'T USE IN PRODUCTION!!!!!
    auto-down-unreachable-after = 10s

  }
}

hmda {
  journal.snapshot.counter = 100
  query {
    fetch.size = 32
    group.size = 1000
  }
  zookeeperHost = "192.168.99.100"
  zookeeperHost = ${?ZOOKEEPER_HOST}
  zookeeperPort = 2181
  zookeeperPort = ${?ZOOKEEPER_PORT}
}

db {
  driver = "slick.driver.PostgresDriver$"

  db {
    url = "jdbc:postgresql://192.168.99.100:54321/hmda?user=postgres&password=postgres"
    url = ${?JDBC_URL}
    driver = org.postgresql.Driver
    numThreads = 2
  }
}

constructr.coordination.nodes = [${hmda.zookeeperHost}":"${hmda.zookeeperPort}]

clustering {
  name = "hmda"
  ip = "127.0.0.1"
  port = 0
  port = ${?APP_PORT}
}

cassandra {
  host = "192.168.99.100"
  host = ${?CASSANDRA_CLUSTER_HOSTS}
  port = 9042
  port = ${?CASSANDRA_CLUSTER_PORT}
  keyspace = "hmda_query"
  keyspace = ${?CASSANDRA_QUERY_KEYSPACE}
  retries = 60
  retry-interval = 1000
}
