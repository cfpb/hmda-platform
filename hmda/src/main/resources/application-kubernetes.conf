# Apache Cassandra with PlainTextAuthProvider
include "persistence.conf"
# AWS Keyspace with PlainTextAuthProvider
# include "persistence-keyspace.conf"
# AWS Keyspace with SigV4AuthProvider
# include "persistence-keyspace-sigv4.conf"
include "hmda.conf"
include "cors.conf"

akka {

  remote {
    artery {
      transport = tcp
      canonical.port = 0 //https://discuss.lightbend.com/t/scalatestroutetest-and-artery-bindexception/5838/2
      // canonical.hostname = ${HOSTNAME} // pick default which is InetAddress.getLocalHost.getHostAddress
      large-message-destinations = ["/temp/*"]
      advanced {
        maximum-frame-size = 30000000b
        maximum-large-frame-size = 30000000b
      }
    }
  }



  diagnostics {
    starvation-detector {
      check-interval = 1s
      initial-delay = 30s
      max-delay-warning-threshold = 100 ms
      warning-interval = 10 seconds
    }
  }

  http.server.default-host-header = "cfpb.gov"
  http.server.parsing.max-content-length = 2G
  http.server.idle-timeout = infinite
  blocking-quality-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-factor = 2.0
    }
    throughput = 1000
  }
  actor {
    provider = "cluster"
    timeout = 8
  }

  blocking-parser-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-factor = 2.0
    }
    throughput = 1000
  }
  actor {
    provider = "cluster"
    timeout = 8
  }

  blocking-upload-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-factor = 2.0
    }
    throughput = 1000
  }
  actor {
    provider = "cluster"
    timeout = 8
  }




  discovery {
    kubernetes-api {
      pod-label-selector = "actorSystemName=hmda2"
      pod-namespace = "default"
      pod-namespace = ${?KUBERNETES_HMDA_POD_NAMESPACE}
    }
  }

  cluster {
    failure-detector.acceptable-heartbeat-pause = 7s
    sharding {
      number-of-shards = 500
      passivate-idle-entity-after = 65 minutes
      passivate-idle-entity-after = ${?AKKA_CLUSTER_IDLE_ENTITY_TIMEOUT}
    }
  }

  management {
    http {
      port = 8558
    }

    cluster.bootstrap {

        contact-point-discovery {
          discovery-method = kubernetes-api
          service-name = "hmda-api"
          service-name = ${?KUBERNETES_HMDA_SERVICE_NAME}
          service-namespace = "default.svc.cluster.local"
          service-namespace = ${?KUBERNETES_HMDA_SERVICE_NAMESPACE}
          stable-margin = 5 seconds
        }
      }

  }
}

keycloak {
  realm = "hmda2"
  client.id = "hmda2-api"
  client.id = ${?KEYCLOAK_HMDA_API_CLIENT_ID}
  public.key.id = "AYUeqDHLF_GFsZYOSMXzhBT4zyQS--KiEmBFvMzJrBA"
  public.key = ${?KEYCLOAK_PUBLIC_KEY_ID}
  auth.server.url = "http://192.168.99.100:31752/auth/"
  auth.server.url = ${?KEYCLOAK_AUTH_URL}
  hmda.admin.role = "hmda-admin"
  hmda.admin.role = ${?KEYCLOAK_HMDA_ADMIN_ROLE}
}

