# Apache Cassandra with PlainTextAuthProvider
include "persistence.conf"
# AWS Keyspace with PlainTextAuthProvider
# include "persistence-keyspace.conf"
# AWS Keyspace with SigV4AuthProvider
# include "persistence-keyspace-sigv4.conf"

include "hmda.conf"
include "cors.conf"
include "edits.conf"

akka {

  diagnostics {
    starvation-detector {
      check-interval = 1s
      initial-delay = 30s
      max-delay-warning-threshold = 100 ms
      warning-interval = 10 seconds
    }
  }

  blocking-quality-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-factor = 2.0
    }
    throughput = 1000
  }
  actor {
    provider = "cluster"
    timeout = 8
  }

  blocking-parser-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-factor = 2.0
    }
    throughput = 1000
  }


  blocking-upload-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-factor = 2.0
    }
    throughput = 1000
  }

  # log-config-on-start = true
  loglevel = info
  log-dead-letters = off
  log-dead-letters-during-shutdown = off

  http.server.parsing.max-content-length = 2G
  http.server.default-host-header = "cfpb.gov"
  http.server.websocket.periodic-keep-alive-max-idle = 1 second
  http.server.idle-timeout = infinite

  discovery.method = akka-dns
  io.dns.resolver = async-dns

  actor {
    provider = "cluster"
    timeout = 40
  }

  cluster {
    failure-detector.acceptable-heartbeat-pause = 12
    metrics.enabled = off
    sharding {
      number-of-shards = 500
      passivation.default-idle-strategy.idle-entity.timeout = 35 minutes
      passivation.default-idle-strategy.idle-entity.timeout = ${?AKKA_CLUSTER_IDLE_ENTITY_TIMEOUT}
    }
  }

  remote.artery {
    transport = tcp
    canonical.port = 2551
    canonical.port = ${?APP_PORT}
    canonical.hostname = "127.0.0.1"
    maximum-frame-size = 30000000b
    maximum-large-frame-size = 30000000b
    large-message-destinations = ["/temp/*"]
  }

  management {
    http {
      hostname = "127.0.0.1"
      port = 8558
      port = ${?MANAGEMENT_PORT}

      bind-hostname = 0.0.0.0
      bind-port = 8558
      bind-port = ${?MANAGEMENT_PORT}
    }
  }

}


cinnamon.application = "hmda-platform"

cinnamon.akka {
  // monitor all actors
  // see https://developer.lightbend.com/docs/telemetry/current/instrumentations/akka/akka.html
  actors {
    "hmda.*" {
      report-by = class
    }
  }

  // monitor the named-example stream that we have explicitly instrumented
  // see https://developer.lightbend.com/docs/telemetry/current/instrumentations/akka-streams/akka-streams.html
  streams {
    "hmda.*" {
      report-by = name
    }
  }

  // monitor akka http paths
  // see https://developer.lightbend.com/docs/telemetry/current/instrumentations/akka-http/akka-http-configuration.html#example-configuration-1
  http {
    servers {
      "*:*" {
        paths {
          "*" {
            metrics = on
          }
        }
      }
    }
  }
}
// expose the HTTP metrics server that Prometheus will scrape to gather metrics
cinnamon.prometheus {
  http-server {
    port = 9009
    daemon = false
  }

  // runs on port 9009
  exporters += http-server
}