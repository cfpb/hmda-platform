include "serialization.conf"

akka {

  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"

    query {
      journal.id = "akka.persistence.cassandra.query"
    }

    cassandra {
      events-by-tag {
        max-message-batch-size = 30
        max-message-batch-size = ${?TAG_BATCH_SIZE}
        flush-interval = 150ms
        flush-interval = ${?TAG_FLUSH_INTERVAL}
        read-profile = "akka-persistence-cassandra-profile-read"
        write-profile = "akka-persistence-cassandra-profile"
      }
      journal {
        keyspace = "hmda2_journal"
        keyspace = ${?CASSANDRA_JOURNAL_KEYSPACE}
        table = "journal"
        events-by-tag.max-message-batch-size = 30
        events-by-tag.max-message-batch-size = ${?TAG_BATCH_SIZE}
        events-by-tag.flush-interval = 150ms
        events-by-tag.flush-interval = ${?TAG_FLUSH_INTERVAL}
        # https://doc.akka.io/libraries/akka-persistence-cassandra/current/configuration.html#default-configuration
        # default size of target-partition-size = 500000
        target-partition-size = 500000
        target-partition-size = ${?CASSANDRA_TARGET_PARTITION_SIZE}
      }
      query {
        # reference: https://github.com/akka/akka-persistence-cassandra/blob/v0.101/core/src/main/resources/reference.conf
        # Sequence numbers for a persistenceId is assumed to be monotonically increasing
        # without gaps. That is used for detecting missing events.
        # In early versions of the journal that might not be true and therefore
        # this can be relaxed by setting this property to off.
        gap-free-sequence-numbers = off
        # https://github.com/akka/akka-persistence-cassandra/blob/main/core/src/main/resources/reference.conf#L210
        read-profile = "akka-persistence-cassandra-profile-read"
      }
      snapshot {
        keyspace = "hmda2_snapshot"
        keyspace = ${?CASSANDRA_SNAPSHOT_KEYSPACE}
        table = "snapshot"
      }
    }
  }
}

datastax-java-driver {
  profiles {
      akka-persistence-cassandra-profile {
           basic {
             request.consistency = LOCAL_QUORUM
           }
      }
      akka-persistence-cassandra-snapshot-profile {
           basic {
             request.consistency = LOCAL_QUORUM
           }
      }
      akka-persistence-cassandra-profile-read {
           basic {
             request.consistency = LOCAL_ONE
           }
      }      
  }
  basic {
      contact-points = ["localhost:9042"]
      contact-points = [${?CASSANDRA_CLUSTER_HOSTS}]
      load-balancing-policy.local-datacenter = "datacenter1"
      load-balancing-policy.local-datacenter = ${?CASSANDRA_CLUSTER_DC}
      load-balancing-policy.slow-replica-avoidance = false 
      load-balancing-policy.class = com.aws.ssa.keyspaces.loadbalancing.AmazonKeyspacesRoundRobinLoadBalancingPolicy
      request.consistency = LOCAL_QUORUM      
      request.default-idempotence = true
      request.page-size = 20
      request.page-size = ${?CASSANDRA_PAGESIZE}
  }



  advanced {
    resolve-contact-points = false
    reconnect-on-init = true
    
    advanced.protocol {
      version = V4
    }
    auth-provider {
      class = software.aws.mcs.auth.SigV4AuthProvider
      aws-region = "us-east-1"
    }
    request-tracker {
      classes = [RequestLogger]
      logs {
        slow {
          threshold = 1 second
          enabled = true
        }
        error.enabled = true      
      }
    }
    ssl-engine-factory {
        class = DefaultSslEngineFactory
        truststore-path = ${?CASSANDRA_TRUSTSTORE_FILE}
        truststore-password = ${?CASSANDRA_TRUSTSTORE_PASSWORD}
        hostname-validation = false
    }    
    connection {
      pool.local.size = 12
    }
    retry-policy {
        class =  com.aws.ssa.keyspaces.retry.AmazonKeyspacesExponentialRetryPolicy
	      max-attempts = 3
    }
    prepared-statements {
	    prepare-on-all-nodes = false
      reprepare-on-up.enabled = false
    }
    netty = {
      timer.tick-duration = 1000 milliseconds
      io-group.size = 64
   }
  }
}

kafka {
  hosts = "localhost:9092"
  hosts = ${?KAFKA_CLUSTER_HOSTS}
  idle-timeout = 5
  idle-timeout = ${?KAFKA_IDLE_TIMEOUT}
  security.protocol=""
  security.protocol=${?KAFKA_SECURITY}
  # ssl.truststore.location = ""
  # ssl.truststore.location = ${?TRUSTSTORE_PATH}
  # ssl.truststore.password = ""
  # ssl.truststore.password = ${?TRUSTSTORE_PASSWORD}
  # ssl.endpoint = ""
  # ssl.endpoint = ${?KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG}
  sasl.mechanism="AWS_MSK_IAM"
  # sasl.mechanism=${?KAFKA_SASL_MECHANISM}
  sasl.jaas.config="software.amazon.msk.auth.iam.IAMLoginModule required;"
  # sasl.jaas.config="{?KAFKA_SASL_JAAS_CONFIG}"
  sasl.client.callback.handler.class="software.amazon.msk.auth.iam.IAMClientCallbackHandler"
  #sasl.client.callback.handler.class="{?KAFKA_SASL_CLASS}"  
}