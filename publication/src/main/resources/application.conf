akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  http.parsing.max-content-length = 1G
  http.server.default-host-header = "cfpb.gov"

  actor {
    provider = cluster
    deployment {
      /hmda-aggregate-disclosure {
        dispatcher = publication-dispatcher
      }
    }
  }

  remote {
    log-remote-lifecycle-events = error
    netty.tcp {
      hostname = ${clustering.ip}
      port = ${clustering.port}
    }
  }

  cluster {
    failure-detector.threshold = 12 //Increase value for AWS environments
    metrics.enabled = off

    retry-unsuccessful-join-after = 20s

    //DON'T USE IN PRODUCTION!!!!!
    auto-down-unreachable-after = 10s

  }



  extensions = ["de.heikoseeberger.constructr.ConstructrExtension"]

}

constructr.coordination.nodes = [${hmda.zookeeperHost}":"${hmda.zookeeperPort}]

clustering {
  name = "hmda"
  ip = "127.0.0.1"
  port = 0
  port = ${?APP_PORT}
}

hmda {
  actor {
    timeout = 5
  }
  zookeeperHost = "192.168.99.100"
  zookeeperHost = ${?ZOOKEEPER_HOST}
  zookeeperPort = 2181
  zookeeperPort = ${?ZOOKEEPER_PORT}
}

publication-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}