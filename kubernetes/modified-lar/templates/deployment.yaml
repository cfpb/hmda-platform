apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "modified-lar.fullname" . }}
  annotations:
    downscaler/uptime: Mon-Fri 10:00-23:00 UTC
    reloader.stakater.com/search: "true"
  labels:
    app: {{ include "modified-lar.name" . }}
    chart: {{ include "modified-lar.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "modified-lar.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "modified-lar.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: hmda-platform
#      initContainers:
#        - args:
#            - cp /opt/java/openjdk/lib/security/* /opt/docker/temporary/
#          command:
#            - /bin/sh
#            - -c
#            - --
#          image: 626560329871.dkr.ecr.us-east-1.amazonaws.com/hmda/hmda-auth:init-universal-12092025
#          name: hmda-init-universal
#          resources: {}
#          terminationMessagePath: /dev/termination-log
#          terminationMessagePolicy: File
#          volumeMounts:
#            - mountPath: /opt/docker/temporary
#              name: jksfolder
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: rds-secret-provider-vol
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: hmda-rds-secrets-provider
        - name: k8ssandra-secret-provider-vol
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: hmda-rds-secrets-provider
        - name: tz-config
          hostPath:
            path: /usr/share/zoneinfo/America/New_York
#        - name: cassandra-truststore
#          secret:
#            secretName: cassandra-truststore
#        - emptyDir: {}
#          name: jksfolder
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          volumeMounts:
            - name: rds-secret-provider-vol
              mountPath: /mnt/rds-secrets-store
            - name: k8ssandra-secret-provider-vol
              mountPath: /mnt/k8ssandra-secrets-store
            - name: tz-config
              mountPath: /etc/localtime
#            - name: cassandra-truststore
#              readOnly: true
#              mountPath: "/opt/cassandra_truststore"
#            - mountPath: /opt/java/openjdk/lib/security/
#              name: jksfolder
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL             
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
#          resources:
#            limits:
#              cpu: "4"
#              memory: "2200Mi"
          env:
            - name: _JAVA_OPTIONS
              value: >
                -Dhttps.protocols=SSLv3,TLSv1,TLSv1.1,TLSv1.2
                -Dcom.sun.security.enableAIAcaIssuers=true
            - name: PG_HOST
              valueFrom:
                secretKeyRef:
                  name: platform-rds-secrets
                  key: host
            - name: PG_DATABASE
              valueFrom:
                secretKeyRef:
                  name: platform-rds-secrets
                  key: database
            - name: PG_USER
              valueFrom:
                secretKeyRef:
                  name: platform-rds-secrets
                  key: username
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: platform-rds-secrets
                  key: password
#            - name: PG_SSL
#              valueFrom:
#                configMapKeyRef:
#                  name: postgresql-configmap
#                  key: postgres.ssl
#            - name: JDBC_URL
#              valueFrom:
#                secretKeyRef:
#                  name: inst-postgres-credentials
#                  key: url
            - name: CASSANDRA_CLUSTER_HOSTS
              valueFrom:
                configMapKeyRef:
                  name: cassandra-configmap
                  key: cassandra-hosts
            - name: CASSANDRA_CLUSTER_DC
              valueFrom:
                configMapKeyRef:
                  name: cassandra-configmap
                  key: cassandra-cluster-dc
            - name: CASSANDRA_CLUSTER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: cassandra-credentials
                  key: cassandra.username
            - name: CASSANDRA_JOURNAL_KEYSPACE
              valueFrom:
                configMapKeyRef:
                  name: cassandra-configmap
                  key: cassandra-keyspace
            - name: CASSANDRA_SNAPSHOT_KEYSPACE
              valueFrom:
                configMapKeyRef:
                  name: cassandra-configmap
                  key: cassandra-keyspace-snapshot
            - name: CASSANDRA_CLUSTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cassandra-credentials
                  key: cassandra.password
#            - name: CASSANDRA_TRUSTSTORE_FILE
#              value: "/opt/cassandra_truststore/cassandra_truststore.jks"
#            - name: CASSANDRA_TRUSTSTORE_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: cassandra-truststore-password
#                  key: password
            - name: KAFKA_CLUSTER_HOSTS
              valueFrom:
                configMapKeyRef:
                  name: kafka-configmap
                  key: kafka.hosts
#            - name: AWS_ACCESS_KEY_ID
#              valueFrom:
#                secretKeyRef:
#                  name: aws-credentials
#                  key: aws-access-key-id
#            - name: AWS_SECRET_ACCESS_KEY
#              valueFrom:
#                secretKeyRef:
#                  name: aws-credentials
#                  key: aws-secret-access-key
            - name: AWS_ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: s3-configmap
                  key: aws-environment
            - name: S3_PUBLIC_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: s3-configmap
                  key: s3-public-bucket
            - name: BANK_FILTER_LIST
              valueFrom:
                configMapKeyRef:
                  name: bank-filter-configmap
                  key: bank-filter-list
            - name: HTTP_CENSUS_HOST
              valueFrom:
                configMapKeyRef:
                  name: http-configmap
                  key: census.host
            - name: HTTP_CENSUS_PORT
              valueFrom:
                configMapKeyRef:
                  name: http-configmap
                  key: census.port
            - name: KAFKA_LOG_LEVEL
              value: INFO
            - name: KAFKA_MODIFIED_LAR_TOPIC
              value: {{.Values.kafka.modifiedLarTopic}}
            - name: KAFKA_SIGN_TOPIC
              value: {{.Values.kafka.signTopic}}
            - name: KAFKA_MODIFIED_LAR_GROUP
              value: {{.Values.kafka.modifiedLarGroup}}
            {{- if .Values.kafka.security }}
            - name: KAFKA_SECURITY
              value: {{.Values.kafka.security}}
            {{- end }}              
            - name: IS_GENERATE_MLAR_S3_FIES
              valueFrom:
                configMapKeyRef:
                  name: mlar-options-configmap
                  key: generateMlarS3File
            - name: IS_REGENERATE_MLAR
              valueFrom:
                configMapKeyRef:
                  name: mlar-options-configmap
                  key: regenerateMlarData
            - name: IS_CREATE_DISPOSITION_KAFKA_RECORD
              valueFrom:
                configMapKeyRef:
                  name: mlar-options-configmap
                  key: createDispositionKafkaRecord